linux下有三种安装方式：源码安装 、rpm包安装、二进制安装

源码安装软件一般有以下几个步骤组成：下载解压源码、分析安装平台环境（ifconfigure）、编译安装软件（make,make install）。

linux下软件的源码一般都是C或者c++语言编写的，常见源码打包格式有.tar.gz、.tar.bz2等。可以通过wget下载命令将源码包直接下载到linux系统下。
下载后解压，进入解压后生成的目录中，在这个目录下，一般都存在一个文件和一个configure文件，REDAME这个文件详细介绍了这个软件所能完成的功能、授权许可、安装需求、安装注意事项、安装方式等等。

linux下软件的安装受到操作系统安装环境的影响，比如某些软件在安装或者运行过程中需要调用操作系统本身的库文件，或者需要运行系统的某个工具，
但是系统中不存在这个库文件或者这个工具没有安装，那么安装或者运行软件就会失败。
为了避免这个问题，可以在当前目录下直接输入“./configure”进行软件安装的环境测试，如果系统缺省某个文件，就需要进行安装，直到测试通过。
通常源码安装都需要GCC或者CC编译器，这些编译器一般中安装系统时定制安装包的开发工具选项下。

在./configure 后面加上软件的安装路径以及安装所需的模块，可以定制用户需要的软件功能。

编译安装软件
在linux系统下，make是我们经常用到的编译命令。对于一个包含很多源文件的应用程序，使用make和makefile工具可以简单快速的解决各个源文件之间复杂和依赖关系。
同时，make工具还可以自动完成所有源码文件的编译工作，并且可以只对上次编译后修改过的文件进行增量编译。
makefile文件
make工具最主要功能就是通过makefile文件实现的，makefile文件是按照某种语法来进行编写的，文件中定义了各个源文件之间的依赖关系，并说明了如何编译源文件并生成可执行文件，
它通过描述各个源程序之间的关系让make工具自动完成编译工作。
在linux系统下，习惯用Makefile替代makefile文件，我们在执行configure通过后，就会在当前目录下生成这个文件，一般情况下在命令行输入make时，make命令会默认去寻找当前目录下的Makefile文件，
如果我们用其它文件作为makefile，就要在make命令选项后指定makefile文件，例如我们指定编译规则文件是make_file，就需要使用如下命令：
make -f make_file

例如有一个test程序，有三个源文件file1.c、file2.c、file3.c以及库文件LS编译生成，这三个源文件不分别包含了自己的头文件1.h、2.h、3.h，
通常C编译器将会输出三个目标文件file1.o、file2.o、file3.o。假定file.c和file3.c都要声明用到一个apcs的文件，但是file2.c不用，
也就是在file1.c和file3.c文件中都有类似"#include"apcs""的声明。
下面这段代码就是对test程序的描述：
1:#It is a example for describing makefile
2:test: file1.o file2.o file3.o
3:cc file1.o file2.o file3.o -LS -o test
4:file1.o:file1.c 1.h apcs
5:gcc -c file1.c
6:file3.o:file3.c 3.h apcs
7:gcc -c file3.c
8:file2.o:file2.c c.h
9:gcc -c file2.c

这个描述文档其实就是一个makefile文件，第一行为注释行，第二行指定test程序有file1.o、file2.o、file3.o链接生成，
第三行描述了如何从test所依赖的文件建立可执行文件，第四、六、八行定义了三个目标文件和它们依赖的.c、.h和apcs文件。
剩下的第五、七、九行定义了如何从目标依赖的文件生成可执行文件。
在命令行输入make命令，即可进入编译阶段，编译完毕，会在当前目录以及子目录下生成相应的可执行文件，接下来就进入最后的安装软件阶段，
在命令行输入make install命令，开始安装软件，安装进程会首先创建安装目录，如果没有指定安装目录，安装程序默认会安装在系统的/usr/local目录下创建安装目录。


