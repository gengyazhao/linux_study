linux下有三种安装方式：源码安装 、rpm包安装、二进制安装

源码安装软件一般有以下几个步骤组成：下载解压源码、分析安装平台环境（ifconfigure）、编译安装软件（make,make install）。

linux下软件的源码一般都是C或者c++语言编写的，常见源码打包格式有.tar.gz、.tar.bz2等。可以通过wget下载命令将源码包直接下载到linux系统下。
下载后解压，进入解压后生成的目录中，在这个目录下，一般都存在一个文件和一个configure文件，REDAME这个文件详细介绍了这个软件所能完成的功能、授权许可、安装需求、安装注意事项、安装方式等等。

linux下软件的安装受到操作系统安装环境的影响，比如某些软件在安装或者运行过程中需要调用操作系统本身的库文件，或者需要运行系统的某个工具，
但是系统中不存在这个库文件或者这个工具没有安装，那么安装或者运行软件就会失败。
为了避免这个问题，可以在当前目录下直接输入“./configure”进行软件安装的环境测试，如果系统缺省某个文件，就需要进行安装，直到测试通过。
通常源码安装都需要GCC或者CC编译器，这些编译器一般中安装系统时定制安装包的开发工具选项下。

在./configure 后面加上软件的安装路径以及安装所需的模块，可以定制用户需要的软件功能。

编译安装软件
在linux系统下，make是我们经常用到的编译命令。对于一个包含很多源文件的应用程序，使用make和makefile工具可以简单快速的解决各个源文件之间复杂和依赖关系。
同时，make工具还可以自动完成所有源码文件的编译工作，并且可以只对上次编译后修改过的文件进行增量编译。
makefile文件
make工具最主要功能就是通过makefile文件实现的，makefile文件是按照某种语法来进行编写的，文件中定义了各个源文件之间的依赖关系，并说明了如何编译源文件并生成可执行文件，
它通过描述各个源程序之间的关系让make工具自动完成编译工作。
在linux系统下，习惯用Makefile替代makefile文件，我们在执行configure通过后，就会在当前目录下生成这个文件，一般情况下在命令行输入make时，make命令会默认去寻找当前目录下的Makefile文件，
如果我们用其它文件作为makefile，就要在make命令选项后指定makefile文件，例如我们指定编译规则文件是make_file，就需要使用如下命令：
make -f make_file

例如有一个test程序，有三个源文件file1.c、file2.c、file3.c以及库文件LS编译生成，这三个源文件不分别包含了自己的头文件1.h、2.h、3.h，
通常C编译器将会输出三个目标文件file1.o、file2.o、file3.o。假定file.c和file3.c都要声明用到一个apcs的文件，但是file2.c不用，
也就是在file1.c和file3.c文件中都有类似"#include"apcs""的声明。
下面这段代码就是对test程序的描述：
1:#It is a example for describing makefile
2:test: file1.o file2.o file3.o
3:cc file1.o file2.o file3.o -LS -o test
4:file1.o:file1.c 1.h apcs
5:gcc -c file1.c
6:file3.o:file3.c 3.h apcs
7:gcc -c file3.c
8:file2.o:file2.c c.h
9:gcc -c file2.c

这个描述文档其实就是一个makefile文件，第一行为注释行，第二行指定test程序有file1.o、file2.o、file3.o链接生成，
第三行描述了如何从test所依赖的文件建立可执行文件，第四、六、八行定义了三个目标文件和它们依赖的.c、.h和apcs文件。
剩下的第五、七、九行定义了如何从目标依赖的文件生成可执行文件。
在命令行输入make命令，即可进入编译阶段，编译完毕，会在当前目录以及子目录下生成相应的可执行文件，接下来就进入最后的安装软件阶段，
在命令行输入make install命令，开始安装软件，安装进程会首先创建安装目录，如果没有指定安装目录，安装程序默认会安装在系统的/usr/local目录下创建安装目录。


RPM包安装
RPM就Red Hat Package Manager的缩写，本意是Redhat软件包管理，后成为linux平台下通用的软件包管理方式，
通过RPM方式安装的软件，RPM工具都会记录软件的安装信息，这样方便了软件日后的查询，升级和卸载。

RPM包管理方式的缺点是对操作系统环境的依赖很大，RPM包的安装环境必须与RPM包封装时的环境一致或相当。还需要满足安装时与系统某些软件包的依赖关系，例如A依赖B和C，则必须先安装B和C软件。
RPM包的封装格式一般有两种，分别是RPM和SRPM，SRPM包也是一种RPM，但是它包含了编译时的源码文件和一些编译指定的参数文件，
因而在使用的时候需要重新进行编译，通常SRPM对应的RPM文件类似于xxx.src.rpm格式。

例如：nxserver-2.1.0-22.i386.rpm
其中nxserver表示软件名称
2.1.0表示软件版本号
22表示软件更新发行的次数
i386表示适合硬件的平台(noarch表示这个软件包与硬件构架无关，可以通用)
.rpm是软件包的格式标识

一般的RPM封装包的命名格式都有这五个部分组成，由于SRPM包是需要编译才能使用，因此没有硬件平台选项，其它与RPM包命令格式完全一样。
注意：i386软件包可以在任意x86平台下使用，无论是i686或是x86_64的机器；相反，i686的软件包不一定能在i386硬件上面使用。

RPM工具的使用分为安装、查询、验证、更新、删除等操作。
安装软件包：rpm -i [辅助选项] file1.rpm file2.rpm
-i:install，也可以使用"--install"
常用辅助选项：
-v  显示附加信息
-h  安装时输出标记"#"
--test  只对安装进行测试，并不实际安装
--nodeps  不检查软件之间的依赖关系，加入此选项可能会导致软件不可用
--force   忽略软件包以及软件冲突
--replacepkgs 强制重新安装已经安装的软件包
--prefix      将软件包安装到指定的路径下
--percent     以百分比的形式输出安装的进度
--excludedocs 不安装软件包中的说明文件
--includedocs 安装软件包，包含说明文件

举例：
rpm -ivh ipvsadm-1.24-6.i386.rpm

安装xxx.src.rpm，以my-package.src.rpm为例：
在redhat linux i386平台下进行，常用的有两种方法。
方法一：
rpm -i my-package.src.rpm
cd /usr/src/redhat/SPECS
rpmbuild -bp my-package.specs #一个和软件包同名的specs文件
cd /usr/src/redhat/BUILD/my-package/  #一个软件包同名的目录
./configure
make
make install

方法二：
rpm -i my-package.src.rpm
cd /usr/src/redhat/SPECS
rpmbuild -bb my-package.specs #一个和软件包同名的specs文件
#此时，在/usr/src/redhat/RPM/i386/目录下，有一个或者两个新的rpm包，这个是编译好的二进制文件。这里路径根据具体包的不同，也可能是i686、noarch等等。
rpm -i new-package.rpm  #安装完成

查询软件包
rpm -q [辅助选项] package1 package2
-q  query的意思，也可以使用--query。package1,package2为已经安装的软件包名称。

辅助选项说明：
-f  查询操作系统中某个文件属于哪个对应的rpm软件包
rpm -qf /bin/bash
结果：bash-3.0-19.2
-p  查询以.rpm为后缀的软件包安装后对应的包名称
rpm -qp gcc-3.4.4-2.i386.rpm
结果：gcc-3.4.4-2
-l  显示软件包中所有文件列表 。此选项后面跟软件包安装后对应的包名，不是以.rpm为后缀的完整名。
rpm -ql gcc-3.4.4-2
-i  显示软件包的概要信息，如软件名称、版本、适应平台、大小等等。此选项后面跟完整包名，以.rpm结尾。
rpm -qi gcc-3.4.4-2.i386
或者
rpm -qpi gcc-3.4.4-2.i386.rpm
这里由于用到了-p选项，首先显示出了安装后的软件包名，所以-i选项后可跟.rpm结尾的软件包。
-d  显示软件包中说明文件列表，RPM将软件包中的文件分为三类，一类是配置文件，一类是说明文件，一类是可执行文件。后面跟完整的包名，以.rpm结尾。
rpm -qd file-4.10-2
-s  与-l选项类似，除了显示软件包中的所有文件列表信息，而且还显示每个文件的状态。
RPM已安装的软件包中各个文件拥有四种状态：normal、not installed、replaced、netshared
-R  或--requires，显示软件包所需的功能，所谓功能，可以是软件包标识，也可以是共享动态文件等等，软件包的依赖关系就是依靠功能来实现的。

更新软件包
rpm -U [辅助选项] file1.rpm file2.rpm
-U  upgrade
辅助选项说明
--oldpackage  表示允许降级到一个老版本。

删除软件包
rpm -e [辅助选项] package1 package2
-e  erase
辅助选项说明
--nodeps  不检查依赖性
举例：
删除rsh软件包
rpm -q rsh
结果：rsh-0.17-37.el5
rpm -e rsh-0.17-37.el5





二进制软件安装方式
二进制软件包提供了很多类型的打包方式，最常见的有RPM格式包，还有.tar.gz、.tgz、.bz2等形式的二进制软件包，最后还有一个就是提供安装程序进行安装的二进制软件包。
安装.tar.gz、.bz2二进制软件包，安装其实就是简单的解压过程。根据不同的软件打包格式，解压即可。

提供安装程序的软件包
这类软件包都提供了安装脚本或者安装向导程序，只需在下载后解压，然后进入安装目录，找到类似的setup、install、install.sh之类的可执行文件即可。
















