初始化线程互斥锁	pthread_mutex_lock()

CTRL+C	SIGINT
CTRL+\	SIGQUIT
CTRL+T	SIGINFO

SIGKILL	中止某个进程。 本信号不能被阻塞、处理和忽略。如果管理员发现某个进程终止不了，可尝试发送这个信号
SIGTERM	程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出，shell命令kill缺省产生这个信号。如果进程终止不了，我们才会尝试SIGKILL。

shmctl	操作共享内存	所需头文件#include <sys/types.h>	#include <sys/shm.h>
shmget	创建共享内存		所需头文件#include <sys/ipc.h>	#include <sys/shm.h>
shmat		挂接操作，创建共享存储段之后，将进程连接到它的地址空间
shmdt		分离操作，

IPC（Inter-Process Communication）是指多个进程之间相互通信，交换信息的方法。System V IPC 是指 Linux 引入自 System V 的进程通信机制，一共有三种：
信号量，用来管理对共享资源的访问；
共享内存，用来高效地实现进程间的数据共享；
消息队列，用来实现进程间数据的传递。

linux进程间通信的六种机制
1、管道Pipe和有名管道named pipe：管道用于具有亲缘关系进程间的通信；有名管道除了具有管道所具有的功能外，还能实现无亲缘关系进程间的通信。
必须在系统调用fork（）之前调用pipe（），否则子进程将不会继承文件描述符。
返回值： 若成功则返回零，否则返回-1，错误原因存于errno中。

2、信号Signal:信号是用于通知接收进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身
每个信号都有一个名字和编号，这些名字都以"SIG"开头。信号定义在signal.h头文件中，信号名都定义为正整数。
常见的信号有：
INT中断、 QUIT退出、 KILL强制退出、TERM终止、STOP暂停。


3、消息队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。
创建或者使用消息队列：msgget函数
将消息添加到消息队列中：msgsend函数
从一个消息队列中获取消息：msgrcv函数
消息队列控制函数：msgctl

使用POSIX标准来创建消息队列
发送消息 mq_send
接收消息 mq_receive
消息队列的关闭 mq_close
删除消息队列 mq_unlink
当某个进程还没有关闭此消息队列时，调用mq_unlink时，不会马上删除队列，当最后一个进程关闭队列时，该队列被删除

4、共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。往往与其它通信机制，如信号量结合使用， 来达到进程间的同步及互斥。
5、信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。
6、套接字（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。
