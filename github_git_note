因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。
注意：git config  --global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。

配置用户信息
$ git config --global user.name "gyz"
$ git config --global user.email "gyz@qq.com"


一：创建版本库。
什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，
每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。

pwd 命令是用于显示当前的目录。
1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：
这时候你当前testgit目录下会多了一个.git的目录，
这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。

将d:/00开户/2020-12-15/设置为主版本库repository
*93/50
cd /d/00开户/2020-12-15/
git init
git add *.c
git commit -m 'initial project version'



2. 把文件添加到版本库中。
首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，
Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，
但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。

$ git add readme.txt
fatal: pathspec 'readme.txt' did not match any files

创建readme.txt即可
$ touch ./readme.txt
$ git add readme.txt
$ git commit -m 'add readme.txt'


当前的版本回退到上一个版本
git reset  --hard HEAD^

回退到上上个版本
git reset  --hard HEAD^^

如果要回退到前100个版本
git reset  --hard HEAD~100

回退到最新的版本
如下命令即可获取到版本号：git reflog
git reset  --hard 版本号

将本地仓库推送到GitHub仓库
git remote add origin https：//github.com/gyz/APITest.git

克隆现有仓库到当前目录
 git clone <url>
git clone https://github.com/gengyazhao/linux_study
# 克隆并重命名
git clone https://github.com/gengyazhao/linux_study local_linux_study

忽略文件
一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文
件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore
的文件，列出要忽略的文件的模式。 来看一个实际的 .gitignore 例子：
$ cat .gitignore
*.[oa]
*~

第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二
行告诉 Git 忽略所有名字以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存
副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就为你的
新仓库设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。
文件 .gitignore 的格式规范如下：
• 所有空行或者以 # 开头的行都会被 Git 忽略。
• 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。
• 匹配模式可以以（/）开头防止递归。
• 匹配模式可以以（/）结尾指定目录。
• 要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反
